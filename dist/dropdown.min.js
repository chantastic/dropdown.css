(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

	"use strict";

	function closeDropdown(node) {
	  node.setAttribute("aria-expanded", "false");
	  node.querySelector("[aria-haspopup]").focus();
	}

	function toggleDropdown(node) {
	  if (node.getAttribute("aria-expanded") === "false") {
	    node.setAttribute("aria-expanded", "true");
	    node.querySelector("[aria-label=close]").focus();
	  } else {
	    node.setAttribute("aria-expanded", "false");
	  }
	}

	function handleDropdownEvents(_ref) {
	  var target = _ref.target,
	      type = _ref.type,
	      keyCode = _ref.keyCode;

	  var dropdownRootNode = this;

	  if (keyCode === 27 && type === "keyup" && dropdownRootNode.classList.contains("dropdown")) {
	    closeDropdown(dropdownRootNode);
	  }

	  if (type === "click" && target.classList.contains("dropdown")) {
	    closeDropdown(dropdownRootNode);
	  }

	  if (type === "click" && target.getAttribute("aria-haspopup") === "true") {
	    toggleDropdown(dropdownRootNode);
	  }

	  if (type === "click" && target.getAttribute("aria-label") === "close") {
	    closeDropdown(dropdownRootNode);
	  }
	}

	module.exports = { handleDropdownEvents: handleDropdownEvents };

/***/ }
/******/ ])
});
;