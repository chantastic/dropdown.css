var Dropdown,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Dropdown = (function() {
  function Dropdown(el) {
    if(!el) {
      return;
    }

    this.close = __bind(this.close, this);
    this.toggle = __bind(this.toggle, this);

    this.$node = $(el);
  }

  Dropdown.prototype.toggle = function() {
    var dropdown = this.$node.closest('.dropdown');
    var nodeExpanded = dropdown.attr('aria-expanded');

    // there's some hidden coarsion happening in $.fn.attr. bypassing for now
    if(nodeExpanded === 'false') {
      dropdown.attr('aria-expanded', 'true');
    } else {
      dropdown.attr('aria-expanded', 'false');
    }
  };

  Dropdown.prototype.close = function() {
    var dropdown = this.$node.siblings('.dropdown-trigger').attr('aria-expanded', false);
  };

  return Dropdown;

})();

$.extend( $.expr[ ":" ], {
    data: $.expr.createPseudo ?
	$.expr.createPseudo(function( dataName ) {
	    return function( elem ) {
		return !!$.data( elem, dataName );
	    };
	}) :
    // support: jQuery <1.8
    function( elem, i, match ) {
	return !!$.data( elem, match[ 3 ] );
    },

    focusable: function( element ) {
	return focusable( element, !isNaN( $.attr( element, "tabindex" ) ) );
    },

    tabbable: function( element ) {
	var tabIndex = $.attr( element, "tabindex" ),
	    isTabIndexNaN = isNaN( tabIndex );
	return ( isTabIndexNaN || tabIndex >= 0 ) && focusable( element, !isTabIndexNaN );
    }
});


// selectors
function focusable( element, isTabIndexNotNaN ) {
    var map, mapName, img,
	nodeName = element.nodeName.toLowerCase();
    if ( "area" === nodeName ) {
	map = element.parentNode;
	mapName = map.name;
	if ( !element.href || !mapName || map.nodeName.toLowerCase() !== "map" ) {
	    return false;
	}
	img = $( "img[usemap='#" + mapName + "']" )[ 0 ];
	return !!img && visible( img );
    }
    return ( /input|select|textarea|button|object/.test( nodeName ) ?
	     !element.disabled :
	     "a" === nodeName ?
	     element.href || isTabIndexNotNaN :
	     isTabIndexNotNaN) &&
	// the element and all of its ancestors must be visible
	visible( element );
}


function visible( element ) {
    return $.expr.filters.visible( element ) &&
	!$( element ).parents().addBack().filter(function() {
	    return $.css( this, "visibility" ) === "hidden";
	}).length;
}
